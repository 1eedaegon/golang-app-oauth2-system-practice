// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/1eedaegon/golang-app-oauth2-system-practice/db/ent/image"
	"github.com/1eedaegon/golang-app-oauth2-system-practice/db/ent/predicate"
	"github.com/1eedaegon/golang-app-oauth2-system-practice/db/ent/tenant"
	"github.com/google/uuid"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetImageID sets the "image_id" field.
func (iu *ImageUpdate) SetImageID(u uuid.UUID) *ImageUpdate {
	iu.mutation.SetImageID(u)
	return iu
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableImageID(u *uuid.UUID) *ImageUpdate {
	if u != nil {
		iu.SetImageID(*u)
	}
	return iu
}

// SetName sets the "name" field.
func (iu *ImageUpdate) SetName(s string) *ImageUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *ImageUpdate) SetCreatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCreatedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ImageUpdate) SetUpdatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableUpdatedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetUpdatedAt(*t)
	}
	return iu
}

// SetTenantID sets the "tenant_id" field.
func (iu *ImageUpdate) SetTenantID(u uuid.UUID) *ImageUpdate {
	iu.mutation.SetTenantID(u)
	return iu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableTenantID(u *uuid.UUID) *ImageUpdate {
	if u != nil {
		iu.SetTenantID(*u)
	}
	return iu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (iu *ImageUpdate) ClearTenantID() *ImageUpdate {
	iu.mutation.ClearTenantID()
	return iu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iu *ImageUpdate) SetTenantID(id int) *ImageUpdate {
	iu.mutation.SetTenantID(id)
	return iu
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (iu *ImageUpdate) SetNillableTenantID(id *int) *ImageUpdate {
	if id != nil {
		iu = iu.SetTenantID(*id)
	}
	return iu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iu *ImageUpdate) SetTenant(t *Tenant) *ImageUpdate {
	return iu.SetTenantID(t.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iu *ImageUpdate) ClearTenant() *ImageUpdate {
	iu.mutation.ClearTenant()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.ImageID(); ok {
		_spec.SetField(image.FieldImageID, field.TypeUUID, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.TenantID(); ok {
		_spec.SetField(image.FieldTenantID, field.TypeUUID, value)
	}
	if iu.mutation.TenantIDCleared() {
		_spec.ClearField(image.FieldTenantID, field.TypeUUID)
	}
	if iu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.TenantTable,
			Columns: []string{image.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.TenantTable,
			Columns: []string{image.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetImageID sets the "image_id" field.
func (iuo *ImageUpdateOne) SetImageID(u uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetImageID(u)
	return iuo
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableImageID(u *uuid.UUID) *ImageUpdateOne {
	if u != nil {
		iuo.SetImageID(*u)
	}
	return iuo
}

// SetName sets the "name" field.
func (iuo *ImageUpdateOne) SetName(s string) *ImageUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *ImageUpdateOne) SetCreatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCreatedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ImageUpdateOne) SetUpdatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableUpdatedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetUpdatedAt(*t)
	}
	return iuo
}

// SetTenantID sets the "tenant_id" field.
func (iuo *ImageUpdateOne) SetTenantID(u uuid.UUID) *ImageUpdateOne {
	iuo.mutation.SetTenantID(u)
	return iuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableTenantID(u *uuid.UUID) *ImageUpdateOne {
	if u != nil {
		iuo.SetTenantID(*u)
	}
	return iuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (iuo *ImageUpdateOne) ClearTenantID() *ImageUpdateOne {
	iuo.mutation.ClearTenantID()
	return iuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iuo *ImageUpdateOne) SetTenantID(id int) *ImageUpdateOne {
	iuo.mutation.SetTenantID(id)
	return iuo
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableTenantID(id *int) *ImageUpdateOne {
	if id != nil {
		iuo = iuo.SetTenantID(*id)
	}
	return iuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iuo *ImageUpdateOne) SetTenant(t *Tenant) *ImageUpdateOne {
	return iuo.SetTenantID(t.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iuo *ImageUpdateOne) ClearTenant() *ImageUpdateOne {
	iuo.mutation.ClearTenant()
	return iuo
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.ImageID(); ok {
		_spec.SetField(image.FieldImageID, field.TypeUUID, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.TenantID(); ok {
		_spec.SetField(image.FieldTenantID, field.TypeUUID, value)
	}
	if iuo.mutation.TenantIDCleared() {
		_spec.ClearField(image.FieldTenantID, field.TypeUUID)
	}
	if iuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.TenantTable,
			Columns: []string{image.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.TenantTable,
			Columns: []string{image.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
